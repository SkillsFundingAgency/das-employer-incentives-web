// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.DAS.EmployerIncentives.Web.SystemAcceptanceTests.Features.Application
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Authentication")]
    public partial class AuthenticationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Authentication.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Application", "Authentication", "\tIn order to prevent unauthoried access\r\n\tAs a system\r\n\tI want to only allow auth" +
                    "orised access", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An unauthorised user is asked to log on")]
        [NUnit.Framework.TestCaseAttribute("/login", null)]
        [NUnit.Framework.TestCaseAttribute("/VBKBLD/application-complete/fd0f5a2d-b45b-4a73-8750-ddd167b270c3", null)]
        [NUnit.Framework.TestCaseAttribute("/VBKBLD/apply", null)]
        [NUnit.Framework.TestCaseAttribute("/VBKBLD/apply/MLP7DD/select-apprentices", null)]
        [NUnit.Framework.TestCaseAttribute("/VBKBLD/apply/select-apprentices/fd0f5a2d-b45b-4a73-8750-ddd167b270c3", null)]
        [NUnit.Framework.TestCaseAttribute("/VBKBLD/apply/confirm-apprentices/fd0f5a2d-b45b-4a73-8750-ddd167b270c3", null)]
        [NUnit.Framework.TestCaseAttribute("/VBKBLD/apply/declaration/fd0f5a2d-b45b-4a73-8750-ddd167b270c3", null)]
        [NUnit.Framework.TestCaseAttribute("/VBKBLD/apply/MLP7DD/no-eligible-apprentices", null)]
        [NUnit.Framework.TestCaseAttribute("/VBKBLD/apply/cannot-apply", null)]
        [NUnit.Framework.TestCaseAttribute("/VBKBLD/apply/MLP7DD/cannot-apply", null)]
        [NUnit.Framework.TestCaseAttribute("/VBKBLD/apply/MLP7DD/problem-with-service", null)]
        [NUnit.Framework.TestCaseAttribute("/VBKBLD/apply/fd0f5a2d-b45b-4a73-8750-ddd167b270c3/join-organisation", null)]
        [NUnit.Framework.TestCaseAttribute("/VBKBLD/apply/choose-organisation", null)]
        [NUnit.Framework.TestCaseAttribute("/VBKBLD/apply/MLP7DD/validate-terms-signed", null)]
        [NUnit.Framework.TestCaseAttribute("/VBKBLD/apply/MLP7DD/eligible-apprentices", null)]
        [NUnit.Framework.TestCaseAttribute("/VBKBLD/apply/MLP7DD/taken-on-new-apprentices", null)]
        [NUnit.Framework.TestCaseAttribute("/VBKBLD/bank-details/fd0f5a2d-b45b-4a73-8750-ddd167b270c3/need-bank-details", null)]
        [NUnit.Framework.TestCaseAttribute("/VBKBLD/bank-details/fd0f5a2d-b45b-4a73-8750-ddd167b270c3/add-bank-details", null)]
        [NUnit.Framework.TestCaseAttribute("/VBKBLD/bank-details/fd0f5a2d-b45b-4a73-8750-ddd167b270c3/complete/application-sa" +
            "ved", null)]
        [NUnit.Framework.TestCaseAttribute("/VBKBLD/bank-details/fd0f5a2d-b45b-4a73-8750-ddd167b270c3/change-bank-details", null)]
        [NUnit.Framework.TestCaseAttribute("/VBKBLD/cancel/MLP7DD/cancel-application", null)]
        [NUnit.Framework.TestCaseAttribute("/VBKBLD", null)]
        [NUnit.Framework.TestCaseAttribute("/VBKBLD/MLP7DD", null)]
        [NUnit.Framework.TestCaseAttribute("/VBKBLD/MLP7DD/hire-new-apprentice-payment", null)]
        [NUnit.Framework.TestCaseAttribute("/VBKBLD/payments/payment-applications", null)]
        [NUnit.Framework.TestCaseAttribute("/VBKBLD/payments/MLP7DD/payment-applications", null)]
        [NUnit.Framework.TestCaseAttribute("/VBKBLD/payments/MLP7DD/no-applications", null)]
        [NUnit.Framework.TestCaseAttribute("/VBKBLD/payments/choose-organisation", null)]
        public void AnUnauthorisedUserIsAskedToLogOn(string url, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("url", url);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An unauthorised user is asked to log on", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("a user of the system has not logged on", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.When(string.Format("the user access the {0} page", url), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.Then("the user is asked to log on", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
